import os
import tkinter as tk
from tkinter import messagebox, ttk
import google.generativeai as genai
import threading
from PIL import Image, ImageTk

# Thi·∫øt l·∫≠p API Key cho Gemini API
GEMINI_API_KEY = "AIzaSyDGq8ugWb_G86SW9UhrojaPsKH7C6K_Sx0"
if not GEMINI_API_KEY:
    raise ValueError("Vui l√≤ng cung c·∫•p GEMINI_API_KEY trong m√£.")

genai.configure(api_key=GEMINI_API_KEY)

# Kh·ªüi t·∫°o m√¥ h√¨nh Gemini
try:
    model = genai.GenerativeModel('gemini-1.5-flash')
except Exception as e:
    raise RuntimeError(f"Kh√¥ng th·ªÉ kh·ªüi t·∫°o Gemini model: {str(e)}. Ki·ªÉm tra API Key v√† k·∫øt n·ªëi internet.")

# H·ªá th·ªëng h∆∞·ªõng d·∫´n cho AI
system_prompt = (
    "B·∫°n l√† m·ªôt AI h∆∞·ªõng d·∫´n, ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·ªÉ gi√∫p tr·∫ª em h·ªçc t·∫≠p v√† gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ b·∫±ng c√°ch cung c·∫•p g·ª£i √Ω ho·∫∑c h∆∞·ªõng d·∫´n t·ª´ng b∆∞·ªõc. "
    "Kh√¥ng cung c·∫•p ƒë√°p √°n cu·ªëi c√πng. Thay v√†o ƒë√≥, h√£y ƒë∆∞a ra c√°c b∆∞·ªõc, c√¢u h·ªèi g·ª£i m·ªü ho·∫∑c m·∫πo ƒë·ªÉ tr·∫ª t·ª± t√¨m ra c√¢u tr·∫£ l·ªùi. "
    "S·ª≠ d·ª•ng ng√¥n ng·ªØ ƒë∆°n gi·∫£n, th√¢n thi·ªán, vui v·∫ª v√† khuy·∫øn kh√≠ch. Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát."
)

def get_response(text):
    """G·ª≠i c√¢u h·ªèi ƒë·∫øn Gemini API v√† nh·∫≠n ph·∫£n h·ªìi."""
    if not text or text.strip() == "":
        return None, "L·ªói: VƒÉn b·∫£n ƒë·∫ßu v√†o r·ªóng. Vui l√≤ng nh·∫≠p c√¢u h·ªèi h·ª£p l·ªá."
    
    try:
        prompt = f"{system_prompt}\n\nC√¢u h·ªèi: {text}"
        response = model.generate_content(prompt)
        answer = response.text.strip()
        if not answer:
            return None, "L·ªói: Ph·∫£n h·ªìi t·ª´ Gemini API r·ªóng."
        return answer, None
    except Exception as e:
        return None, f"L·ªói khi g·ªçi Gemini API: {str(e)}. Ki·ªÉm tra: 1) API Key c√≥ h·ª£p l·ªá kh√¥ng; 2) K·∫øt n·ªëi internet ·ªïn ƒë·ªãnh; 3) Gi·ªõi h·∫°n API (quota) c√≥ b·ªã v∆∞·ª£t kh√¥ng."

def send_question():
    question = input_text.get().strip()
    if not question:
        messagebox.showwarning("C·∫£nh b√°o", "H√£y nh·∫≠p c√¢u h·ªèi nh√©! üåü")
        return

    add_user_message(question)
    input_text.delete(0, tk.END)
    send_button.config(state='disabled')
    root.update()

    def process_question():
        answer, error = get_response(question)
        root.after(0, lambda: update_ui(answer, error, question))

    threading.Thread(target=process_question, daemon=True).start()

def add_user_message(text):
    user_frame = tk.Frame(chat_frame, bg="#FFF3E0", bd=2, relief="solid")
    user_label = tk.Label(
        user_frame,
        text=text,
        font=("Arial", 12),
        bg="#FFF3E0",
        fg="#D81B60",
        wraplength=400,
        justify="right",
        padx=15,
        pady=10
    )
    user_label.pack(anchor="e", padx=10, pady=5)
    user_frame.pack(anchor="e", fill="x", padx=20, pady=5)
    update_canvas_scroll()

def add_ai_message(text, is_error=False):
    ai_frame = tk.Frame(chat_frame, bg="#E0F7FA", bd=2, relief="solid")
    ai_label = tk.Label(
        ai_frame,
        text=text,
        font=("Arial", 12),
        bg="#E0F7FA" if not is_error else "#FFCDD2",
        fg="#0288D1" if not is_error else "#D32F2F",
        wraplength=400,
        justify="left",
        padx=15,
        pady=10
    )
    ai_label.pack(anchor="w", padx=10, pady=5)
    ai_frame.pack(anchor="w", fill="x", padx=20, pady=5)
    update_canvas_scroll()

def update_ui(suggestion, error, question):
    if error:
        add_ai_message(error, is_error=True)
    else:
        add_ai_message(suggestion)
    send_button.config(state='normal')
    update_canvas_scroll()

def update_canvas_scroll():
    canvas.update_idletasks()
    canvas.configure(scrollregion=canvas.bbox("all"))
    canvas.yview_moveto(1.0)

def exit_app():
    if messagebox.askokcancel("Tho√°t", "B·∫°n c√≥ mu·ªën r·ªùi kh·ªèi AI Tutor kh√¥ng? üåà"):
        root.destroy()

# T·∫°o c·ª≠a s·ªï ch√≠nh
root = tk.Tk()
root.title("Chatbot Th√¥ng Minh - Ng∆∞·ªùi b·∫°n c·ªßa h·ªçc sinh l·ªõp 5")
root.geometry("600x500")
root.configure(bg="#B3E5FC")

# T·∫°o style cho giao di·ªán
style = ttk.Style()
style.configure("TButton", font=("Arial", 12, "bold"), padding=8, relief="flat", background="#F06292", foreground="#FFFFFF")
style.map("TButton",
          background=[('active', '#EC407A')],
          foreground=[('active', '#FFFFFF')])
style.configure("TEntry", font=("Arial", 12), padding=10, fieldbackground="#FFFFFF", foreground="#0288D1", relief="flat")
style.configure("TScrollbar", background="#F06292", troughcolor="#B3E5FC", bordercolor="#B3E5FC")

# T·∫°o canvas v√† scrollbar
canvas = tk.Canvas(root, bg="#B3E5FC", highlightthickness=0)
scrollbar = ttk.Scrollbar(root, orient="vertical", command=canvas.yview, style="TScrollbar")
canvas.configure(yscrollcommand=scrollbar.set)
scrollbar.pack(side="right", fill="y")
canvas.pack(side="left", fill="both", expand=True)

# Th√™m h√¨nh n·ªÅn (t√πy ch·ªçn)
bg_image = None
try:
    image_path = "C:\\AI_Tutor\\background.png"
    if os.path.exists(image_path):
        image = Image.open(image_path)
        bg_image = ImageTk.PhotoImage(image)
        canvas.create_image(0, 0, image=bg_image, anchor="nw")
    else:
        print("H√¨nh n·ªÅn background.png kh√¥ng t·ªìn t·∫°i, b·ªè qua.")
except Exception as e:
    print(f"Kh√¥ng th·ªÉ t·∫£i h√¨nh n·ªÅn: {str(e)}")

# T·∫°o khung ch·ª©a tin nh·∫Øn
chat_frame = tk.Frame(canvas, bg="#B3E5FC", width=560)
canvas.create_window((0, 0), window=chat_frame, anchor="nw", width=560)

# Ti√™u ƒë·ªÅ
title_label = tk.Label(
    chat_frame,
    text="Chatbot Th√¥ng Minh - Ng∆∞·ªùi b·∫°n th√¢n thi·∫øt c·ªßa h·ªçc sinh ü§ñ",
    font=("Arial", 16, "bold"),
    bg="#B3E5FC",
    fg="#F06292"
)
title_label.pack(pady=10)

# Th√¥ng ƒëi·ªáp ch√†o m·ª´ng
welcome_label = tk.Label(
    chat_frame,
    text="Xin ch√†o b·∫°n! M√¨nh l√† Robot Th√¥ng Minh. M√¨nh c√≥ th·ªÉ gi√∫p b·∫°n tr·∫£ l·ªùi c√¢u h·ªèi, k·ªÉ chuy·ªán vui, ho·∫∑c c√πng h·ªçc b√†i ƒë·∫•y! üòä",
    font=("Arial", 12),
    bg="#B3E5FC",
    fg="#0288D1",
    wraplength=500,
    justify="center"
)
welcome_label.pack(pady=10)

# Th√™m th√¥ng ƒëi·ªáp g·ª£i √Ω
suggestion_label = tk.Label(
    chat_frame,
    text="B·∫°n mu·ªën h·ªèi m√¨nh ƒëi·ªÅu g√¨ n√†o?",
    font=("Arial", 12, "italic"),
    bg="#B3E5FC",
    fg="#D81B60"
)
suggestion_label.pack(pady=5)

# Th√™m th√¥ng ƒëi·ªáp ch√†o t·ª´ AI
add_ai_message("Ch√†o b·∫°n nh·ªè! M√¨nh s·∫µn s√†ng gi√∫p b·∫°n h·ªçc t·∫≠p nh√©! H√¥m nay b·∫°n mu·ªën h·ªçc g√¨ n√†o? üòä")

# Khung nh·∫≠p c√¢u h·ªèi
input_frame = tk.Frame(root, bg="#B3E5FC", bd=2, relief="solid")
input_frame.pack(side="bottom", fill="x", padx=10, pady=5)
input_text = ttk.Entry(
    input_frame,
    font=("Arial", 12),
    style="TEntry",
    foreground="#0288D1"
)
input_text.pack(side="left", fill="x", expand=True, padx=(5, 5), pady=5)
send_button = ttk.Button(
    input_frame,
    text="G·ª≠i üåü",
    style="TButton",
    command=send_question,
    cursor="hand2"
)
send_button.pack(side="right", padx=5, pady=5)

# Ch√¢n trang
footer_frame = tk.Frame(root, bg="#B3E5FC")
footer_frame.pack(side="bottom", fill="x", padx=10, pady=5)
footer_label = tk.Label(
    footer_frame,
    text="¬© 2023 ChatBot Th√¥ng Minh - B·ªë B√¨nh B√©o",
    font=("Arial", 10),
    bg="#B3E5FC",
    fg="#0288D1"
)
footer_label.pack()
api_note_label = tk.Label(
    footer_frame,
    text="K·∫øt n·ªëi v·ªõi th·ªùi gian th·ª±c v·ªõi Google API",
    font=("Arial", 8, "italic"),
    bg="#B3E5FC",
    fg="#D81B60"
)
api_note_label.pack()

# Gi·ªØ tham chi·∫øu ƒë·ªÉ h√¨nh n·ªÅn kh√¥ng b·ªã garbage collected
root.bg_image = bg_image

# Ch·∫°y ·ª©ng d·ª•ng
root.protocol("WM_DELETE_WINDOW", exit_app)
root.mainloop()